package kz.sdu.edu.ui.theme.componentsimport androidx.compose.foundation.Imageimport androidx.compose.foundation.backgroundimport androidx.compose.foundation.clickableimport androidx.compose.foundation.interaction.MutableInteractionSourceimport androidx.compose.foundation.layout.Arrangementimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.PaddingValuesimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.aspectRatioimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.heightInimport androidx.compose.foundation.layout.offsetimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.sizeimport androidx.compose.foundation.layout.systemBarsPaddingimport androidx.compose.foundation.layout.widthimport androidx.compose.foundation.layout.wrapContentWidthimport androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.foundation.lazy.itemsimport androidx.compose.foundation.rememberScrollStateimport androidx.compose.foundation.shape.RoundedCornerShapeimport androidx.compose.foundation.verticalScrollimport androidx.compose.material3.Buttonimport androidx.compose.material3.ButtonDefaultsimport androidx.compose.material3.Dividerimport androidx.compose.material3.DividerDefaultsimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.OutlinedTextFieldimport androidx.compose.material3.Scaffoldimport androidx.compose.material3.Textimport androidx.compose.material3.VerticalDividerimport androidx.compose.runtime.Composableimport androidx.compose.runtime.LaunchedEffectimport androidx.compose.runtime.collectAsStateimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableIntStateOfimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.rememberimport androidx.compose.runtime.setValueimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.draw.alphaimport androidx.compose.ui.draw.clipimport androidx.compose.ui.graphics.Colorimport androidx.compose.ui.layout.ContentScaleimport androidx.compose.ui.res.stringResourceimport androidx.compose.ui.text.SpanStyleimport androidx.compose.ui.text.TextLayoutResultimport androidx.compose.ui.text.TextPainterimport androidx.compose.ui.text.buildAnnotatedStringimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.text.style.TextAlignimport androidx.compose.ui.text.withStyleimport androidx.compose.ui.unit.dpimport androidx.compose.ui.unit.emimport androidx.compose.ui.unit.spimport androidx.compose.ui.unit.timesimport androidx.navigation.NavHostControllerimport coil.compose.AsyncImageimport kz.sdu.edu.Rimport kz.sdu.edu.ViewModel.MainViewModelimport kz.sdu.edu.models.BookItemimport kz.sdu.edu.models.CommentRequestimport kz.sdu.edu.ui.theme.DarkTextimport kz.sdu.edu.ui.theme.PrimaryGrayLightimport kz.sdu.edu.ui.theme.PrimaryVioletimport kz.sdu.edu.ui.theme.PrimaryVioletLightimport org.koin.androidx.compose.koinViewModel@Composablefun BookInformationComponents(    navController: NavHostController,    book : BookItem,    onReadBook: () -> Unit) {    var selectedTab by remember { mutableIntStateOf(0) }    var ageLimit = ""    ageLimit = when(book.ageLimit){        "NOT_MATURE" -> "4+"        else -> "18+"    }    Box(        modifier = Modifier            .fillMaxSize()            .systemBarsPadding()    ) {        Column(            modifier = Modifier                .fillMaxSize()                .verticalScroll(rememberScrollState())                .padding(PaddingValues(bottom = 80.dp, start = 16.dp, end = 16.dp))        ) {            Spacer(modifier = Modifier.height(16.dp))            BookInformationTop(navController = navController)            BookInformationMiddle(                title = book.title,                author = book.author,                publishedYear = book.publishedYear.toString(),                bookImage = book.coverImageUrl,            )            Spacer(modifier = Modifier.height(24.dp))            BookInformationStats(                pages = book.pageCount,                reading = 123,                ageLimit = ageLimit,                rating = book.rating.toDouble(),            )            Spacer(modifier = Modifier.height(24.dp))            Row(                modifier = Modifier                    .fillMaxWidth()                    .padding(horizontal = 60.dp),                horizontalArrangement = Arrangement.SpaceBetween            ) {                TabButton(                    text = stringResource(R.string.ovrview),                    isSelected = selectedTab == 0,                ) { selectedTab = 0 }                TabButton(                    text = stringResource(R.string.comments),                    isSelected = selectedTab == 1                ) { selectedTab = 1 }            }            Spacer(modifier = Modifier.height(30.dp))            when (selectedTab) {                0 -> AboutBook(book.description)                1 -> CommentSection(book.id)            }        }        ContinueButton(            text = stringResource(R.string.read_book),            onClicked = onReadBook,            color = ButtonDefaults.buttonColors(                contentColor = Color.White,                containerColor = PrimaryViolet            ),            modifier = Modifier                .align(Alignment.BottomCenter)                .padding(16.dp)        )    }}//@Preview(showBackground = true, showSystemUi = true)@Composableprivate fun BookInformationTop(    navController: NavHostController){    Row(        modifier = Modifier.fillMaxWidth(),        horizontalArrangement = Arrangement.SpaceBetween,    ) {        BackButton(img = R.drawable.back_arrow, onClicked = {navController.popBackStack()})        Column(            modifier = Modifier        ){            BackButton(img = R.drawable.share, onClicked = {/*Here Should be share*/})            Spacer(modifier = Modifier.height(12.dp))            BackButton(img = R.drawable.save, onClicked = {/*Here Should be save to My books*/})        }    }}@Composablefun BookInformationStats(    pages : Int,    reading : Int,    ageLimit : String,    rating : Double){    Row (        modifier = Modifier.fillMaxWidth().padding(horizontal = 30.dp),        verticalAlignment = Alignment.CenterVertically,        horizontalArrangement = Arrangement.SpaceBetween    ){        RowInfo(title = R.string.pages, info = pages.toString())        VerticalDivider(thickness = 2.dp, color = PrimaryVioletLight, modifier = Modifier.height(50.dp))        RowInfo(title = R.string.reading, info = reading.toString())        VerticalDivider(thickness = 2.dp, color = PrimaryVioletLight, modifier = Modifier.height(50.dp))        RowInfo(title = R.string.book_marks, info = ageLimit)        VerticalDivider(thickness = 2.dp, color = PrimaryVioletLight, modifier = Modifier.height(50.dp))        RowInfo(title = R.string.rating, info = "%.1f".format(rating))    }}//@Preview(showBackground = true)@Composableprivate fun BookInformationMiddle(    title : String,    author : String,    publishedYear : String,    bookImage : String,){    Column(        modifier = Modifier.fillMaxWidth(),        horizontalAlignment = Alignment.CenterHorizontally,        verticalArrangement = Arrangement.Center    ) {        AsyncImage(            model = bookImage,            contentDescription = title,            contentScale = ContentScale.Crop,            modifier = Modifier.size(150.dp).clip(RoundedCornerShape(4.dp)).aspectRatio(2f/ 3f)        )        Spacer(modifier = Modifier.height(60.dp))        Text(            text = title,            style = MaterialTheme.typography.bodyLarge.copy(fontSize = 18.sp, fontWeight = FontWeight.SemiBold),            color = DarkText,            textAlign = TextAlign.Center        )        Spacer(modifier = Modifier.height(4.dp))        Text(            text = author,            style = MaterialTheme.typography.bodyMedium.copy(fontSize = 16.sp),            color = PrimaryGrayLight,            textAlign = TextAlign.Center        )        Spacer(modifier = Modifier.height(4.dp))        Text(            text = publishedYear,            style = MaterialTheme.typography.bodyMedium.copy(fontSize = 16.sp),            color = PrimaryGrayLight,            textAlign = TextAlign.Center        )    }}@Composableprivate fun RowInfo(    title : Int,    info : String){    Column(        verticalArrangement = Arrangement.Center,        horizontalAlignment = Alignment.CenterHorizontally    ) {        Text(            text = info,            style = MaterialTheme.typography.titleSmall.copy(fontSize = 20.sp, fontWeight = FontWeight.SemiBold),            color = DarkText        )        Spacer(modifier = Modifier.height(4.dp))        Text(            text = stringResource(title),            style = MaterialTheme.typography.bodyMedium.copy(fontSize = 16.sp),            color = PrimaryGrayLight        )    }}@Composableprivate fun AboutBook(description : String){    var isExpanded by remember { mutableStateOf(false) }    var textLayoutResult by remember { mutableStateOf<TextLayoutResult?>(null) }    val maxLines = if (isExpanded) Int.MAX_VALUE else 5    Column{        Text(            text = stringResource(R.string.about_book),            style = MaterialTheme.typography.titleSmall.copy(fontSize = 20.sp, fontWeight = FontWeight.SemiBold),            color = DarkText        )        Spacer(modifier = Modifier.height(8.dp))        Text(            text = description,            style = MaterialTheme.typography.bodyMedium.copy(fontSize = 15.sp, fontWeight = FontWeight.Normal),            color = DarkText,            textAlign = TextAlign.Justify,            maxLines = maxLines,            onTextLayout = { textLayoutResult = it },            modifier = Modifier.fillMaxWidth()        )        Spacer(modifier = Modifier.height(4.dp))        if (!isExpanded && textLayoutResult?.hasVisualOverflow == true) {            Text(                text = stringResource(R.string.see_more),                style = MaterialTheme.typography.bodyMedium.copy(                    fontSize = 15.sp,                    fontWeight = FontWeight.SemiBold,                    color = PrimaryViolet,                    textAlign = TextAlign.End,                ),                modifier = Modifier.fillMaxWidth().padding(end= 10.dp).clickable {                    isExpanded = true                }            )        } else if (isExpanded) {            Text(                text = stringResource(R.string.see_less),                style = MaterialTheme.typography.bodyMedium.copy(                    fontSize = 15.sp,                    fontWeight = FontWeight.SemiBold,                    color = PrimaryViolet,                    textAlign = TextAlign.End,                ),                modifier = Modifier.fillMaxWidth().padding(end= 10.dp).clickable {                    isExpanded = false                }            )        }    }}@Composableprivate fun TabButton(text : String, isSelected : Boolean, onClick: () -> Unit){    Column(        modifier = Modifier.clickable { onClick() },        horizontalAlignment = Alignment.CenterHorizontally    ) {        Text(            text = text,            color = if (isSelected) PrimaryViolet else PrimaryGrayLight,            style = MaterialTheme.typography.titleMedium.copy(fontSize = 18.sp, fontWeight = FontWeight.SemiBold)        )        if (isSelected) {            Spacer(modifier = Modifier.height(4.dp))            Divider(color = PrimaryViolet, thickness = 2.dp, modifier = Modifier.width(100.dp))        }    }}@Composableprivate fun CommentSection(    bookId: Int,    viewModel: MainViewModel = koinViewModel()) {    // Ensure comments are loaded when this section appears.    LaunchedEffect(bookId) {        viewModel.getComments(bookId)    }    val comments by viewModel.comments.collectAsState()    Column(modifier = Modifier.fillMaxWidth()) {        Text(            text = "Comments",            style = MaterialTheme.typography.titleMedium,            color = DarkText        )        Spacer(modifier = Modifier.height(8.dp))        // Wrap the LazyColumn in a Box with a maximum height constraint.        Box(modifier = Modifier            .fillMaxWidth()            .heightIn(max = 300.dp)  // Adjust this value as needed.        ) {            LazyColumn(                modifier = Modifier.fillMaxWidth(),                verticalArrangement = Arrangement.spacedBy(8.dp)            ) {                if (comments.isEmpty()) {                    item {                        Text(                            text = "No comments yet. Be the first to comment!",                            style = MaterialTheme.typography.bodyMedium,                            color = PrimaryGrayLight,                            modifier = Modifier.padding(8.dp)                        )                    }                } else {                    items(comments) { comment ->                        Column(                            modifier = Modifier                                .fillMaxWidth()                                .background(color = Color(0xFFF0F0F0), shape = RoundedCornerShape(8.dp))                                .padding(8.dp)                        ) {                            Text(                                text = comment.user,                                style = MaterialTheme.typography.bodyLarge.copy(fontWeight = FontWeight.Bold),                                color = DarkText                            )                            Spacer(modifier = Modifier.height(4.dp))                            Text(                                text = comment.content,                                style = MaterialTheme.typography.bodyMedium,                                color = DarkText                            )                            Spacer(modifier = Modifier.height(4.dp))                            Text(                                text = "Rating: ${comment.rate}",                                style = MaterialTheme.typography.bodySmall,                                color = PrimaryViolet                            )                            Spacer(modifier = Modifier.height(2.dp))                            Text(                                text = comment.createdAt,                                style = MaterialTheme.typography.bodySmall,                                color = PrimaryGrayLight                            )                        }                    }                }            }        }        Spacer(modifier = Modifier.height(16.dp))        // Inputs for new comment.        var commentText by remember { mutableStateOf("") }        var ratingText by remember { mutableStateOf("") }        OutlinedTextField(            value = commentText,            onValueChange = { commentText = it },            label = { Text("Enter your comment") },            modifier = Modifier.fillMaxWidth()        )        Spacer(modifier = Modifier.height(8.dp))        OutlinedTextField(            value = ratingText,            onValueChange = { ratingText = it },            label = { Text("Rating (0-5)") },            modifier = Modifier.fillMaxWidth()        )        Spacer(modifier = Modifier.height(8.dp))        Button(            onClick = {                val ratingInt = ratingText.toIntOrNull() ?: 0                val commentRequest = CommentRequest(content = commentText, rate = ratingInt)                viewModel.sendComments(bookId, commentRequest)                // Clear inputs after sending.                commentText = ""                ratingText = ""            },            modifier = Modifier.align(Alignment.End)        ) {            Text("Send")        }    }}